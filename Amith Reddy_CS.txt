--CREATING BANK_MASTER TABLE
CREATE TABLE BANK_MASTER(ACNO INT PRIMARY KEY, CNAME VARCHAR(20) NOT NULL,CITY VARCHAR(40) DEFAULT 'HYDERABAD', BALANCE MONEY NOT NULL CHECK(BALANCE>=500), BCODE INT FOREIGN KEY REFERENCES B_BRANCH(BCODE))

CREATE TABLE B_BRANCH(BCODE INT PRIMARY KEY,LOCATION VARCHAR(20) NOT NULL)  --CREATING B_BRANCH TABLE
--CREATING B_TRANSACTION TABLE
CREATE TABLE B_TRANSACTION(ACNO INT FOREIGN KEY REFERENCES BANK_MASTER(ACNO), TTYPE CHAR(1), TDATE DATETIME NOT NULL,AMT MONEY NOT NULL)

                                                 --INSERTING ROWS INTO B_BRANCH TABLE
INSERT INTO B_BRANCH VALUES(1,'HYDERABAD')
INSERT INTO B_BRANCH VALUES(2,'ALWAL')
INSERT INTO B_BRANCH VALUES(3,'MOINABAD')
INSERT INTO B_BRANCH VALUES(4,'SECUNDERABAD')
INSERT INTO B_BRANCH VALUES(5,'HYDERABAD')
SELECT * FROM B_BRANCH
 

                                                  --INSERTING ROWS INTO BANK_MASTER TABLE
INSERT INTO BANK_MASTER VALUES(2401,'AMITH','HYDERABAD',250000,1)
INSERT INTO BANK_MASTER (ACNO,CNAME,BALANCE,BCODE)VALUES(2402,'SUGGU',350000,1)
INSERT INTO BANK_MASTER VALUES(2403,'DEEPU','ALWAL',20000,2)
INSERT INTO BANK_MASTER VALUES(2404,'KIRAN','HYDERABAD',500000,4)
INSERT INTO BANK_MASTER VALUES(2405,'AJAY','HYDERABAD',250000,1)

SELECT * FROM BANK_MASTER

                                                  --INSERTING ROWS INTO B_TRANSACTION TABLE
INSERT INTO B_TRANSACTION VALUES(2401,'W',2019-05-24,15000)
INSERT INTO B_TRANSACTION VALUES(2402,'D',2019-03-13,10000)
INSERT INTO B_TRANSACTION VALUES(2403,'W',2019-05-02,16000)
INSERT INTO B_TRANSACTION VALUES(2401,'D',2019-14-01,11000)
INSERT INTO B_TRANSACTION VALUES(2405,'W',2019-08-07,10000)
INSERT INTO B_TRANSACTION VALUES(2402,'D',2019-03-13,10000)
INSERT INTO B_TRANSACTION VALUES(2401,'W',2019-05-02,16000)
INSERT INTO B_TRANSACTION VALUES(2401,'D',2019-14-01,11000)
INSERT INTO B_TRANSACTION VALUES(2403,'W',2019-08-07,10000)
INSERT INTO B_TRANSACTION VALUES(2401,'W',2019-12-07,10000)
SELECT * FROM B_TRANSACTION

1)--LIST THE BANK MASTER DETAILS WHICH CUSTOMER HAVE AT LEAST 30000 AND ABOVE?
SELECT * FROM BANK_MASTER WHERE BALANCE>=30000

2)--LIST THE ALL BRANCHS,BANK MASTER DETAILS WHICH BRANCH HAVE THE CUSTOMERS.
SELECT * FROM B_BRANCH B,BANK_MASTER M WHERE EXISTS (SELECT CNAME FROM BANK_MASTER WHERE M.BCODE=B.BCODE)

3)--LIST THE BANK MASTER DETAILS WHICH CUSTOMER MAXIMUM NO.OF TIMES
                                                              --FOR ‘W’ TRANSACTION
SELECT * FROM BANK_MASTER WHERE ACNO=(
SELECT ACNO FROM (
SELECT ACNO,COUNT(*) AS COUNTT FROM B_TRANSACTION WHERE TTYPE='W' GROUP BY ACNO HAVING 
COUNT(*)=
(SELECT MAX(COUNTT) FROM(SELECT ACNO,COUNT(*) 
AS COUNTT FROM B_TRANSACTION WHERE TTYPE='W' GROUP BY ACNO )B_TRANSACTIONS))B_TRANSACTIONS)

4)--FIND THE TOTAL BAL BASED ON BRANCH CODE AND WHICH BRANCH TOTAL BAL IS ABOVE 100000 THOSE BRANCH,CUSTOMER DETAILS.
SELECT * FROM BANK_MASTER M,B_BRANCH B WHERE B.BCODE=M.BCODE AND M.BCODE IN
(SELECT BCODE FROM BANK_MASTER GROUP BY BCODE HAVING SUM(BALANCE)>200000)

5)--TO MAKE NON-CLUSTERED INDEX ON ‘LOCATION’ COLUMN.
CREATE NONCLUSTERED INDEX CLUSTERED_LOCATION ON B_BRANCH(LOCATION)   --CREATING NONCLUSTERED INDEX
SELECT * FROM B_BRANCH


6)--TO INSERT RECORD INTO BANK TRANSACTION TABLE AND TO UPDATE BANK
CREATE TRIGGER T11 ON B_TRANSACTION AFTER INSERT
AS
BEGIN
DECLARE C1 CURSOR FOR SELECT * FROM B_TRANSACTION
DECLARE @ACCNO INT,@TTYPE VARCHAR(2),@DATE DATETIME, @AMOUNT INT
OPEN C1
FETCH NEXT FROM C1 INTO @ACCNO,@TTYPE,@DATE,@AMOUNT --START THE LOOP
WHILE(@@FETCH_STATUS=0)
BEGIN
FETCH NEXT FROM C1 INTO @ACCNO,@TTYPE,@DATE,@AMOUNT -- CONTINUE THE LOOP
END
IF @TTYPE='D'
UPDATE BANK_MASTER SET BALANCE=BALANCE +@AMOUNT WHERE ACNO=@ACCNO  --UPDATION
ELSE
UPDATE BANK_MASTER SET BALANCE=BALANCE -@AMOUNT WHERE ACNO=@ACCNO  --UPDATION
CLOSE C1
DEALLOCATE C1
END
----INSERTION INTO B_TRANSACTION
INSERT INTO B_TRANSACTION VALUES(2401,'W',2019-09-27,10000)
INSERT INTO B_TRANSACTION VALUES(2401,'D',2019-09-27,10000)
SELECT * FROM BANK_MASTER

7)--TO MAKE VIEW WHICH CUSTOMER BAL IS ABOVE 5000?
CREATE VIEW VW                   --CREATING VIEW
AS
SELECT * FROM BANK_MASTER WHERE BALANCE > 5000
SELECT * FROM VW

8)--TO DISPLAY ALL BANKMASTER DETAILS FOR GIVEN ACNO USING ‘PROCEDURE’
CREATE PROC P(@A INT)                -- CREATING PROCEDURE
AS
BEGIN
EXEC('SELECT * FROM BANK_MASTER WHERE ACNO='+@A)
END
EXEC P 2401                          --EXECUTING PROCEDURE

9)--TO GET ALL TRANSACTION DETAILS BASED ON DATE WISE.
SELECT * FROM B_TRANSACTION ORDER BY TDATE 

10)--TO GIVE THE INTEREST 10% IF THE CUST BALANCE IS MORE THAN 100000
--CREATING FUNCTION.
CREATE FUNCTION 
INTRST(@A INT)
RETURNS FLOAT
AS
BEGIN
DECLARE @C FLOAT,@BAL INT,@J INT
SELECT @J=BALANCE FROM BANK_MASTER WHERE ACNO=@A
IF  @J>=100000
BEGIN 
SET @C=@J*0.1

END
RETURN @J+@C
END

DECLARE @A INT
SET @A= DBO.INTRST(2401)
PRINT @A 
UPDATE BANK_MASTER SET BALANCE=@A WHERE ACNO =2401 --UPDATING

SELECT * FROM BANK_MASTER
SELECT * FROM B_BRANCH

11)--TO LIST THE 3 RD MAXIMUM BALANCE CUSTOMER DETAILS.
SELECT * FROM BANK_MASTER WHERE BALANCE=(SELECT MAX(BALANCE) FROM BANK_MASTER WHERE 
BALANCE<(SELECT MAX(BALANCE) FROM BANK_MASTER WHERE BALANCE<(SELECT MAX(BALANCE) FROM BANK_MASTER))) -- WITH 3 SUBQUERY WE GET 3 MAXIMUM BALANCE
